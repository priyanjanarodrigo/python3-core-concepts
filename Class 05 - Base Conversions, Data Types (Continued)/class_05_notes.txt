=============================================================================================	
* Data types -> continued ......
=============================================================================================

 - Java vs Python regarding size of a variable
  --------------------------------------------

  class Test {
      public static void main(String[] args){
          int x-10; // Size is 4 bytes and int is a primitive. Size is fixed
      }
  }

 - Size of an object is not filed in any language. Size will be adjusted based on the assigned values

 - In Python it is declared as -> x = 10;

 - In Python everything is an object only including data types. There are no primitives in Python.
   All data types have been implemented as objects

 - Therefore, size and range is not that much concerned in Python

=============================================================================================	
* Base conversions
=============================================================================================

 - There are utility functions available so we can convert any Base to the required Base.

    - bin(<Any int value of any Base>) , Returns an int 
    - oct(<Any int value of any Base>) , Returns an int 
    - hex(<Any int value of any Base>) , Returns an int 

 - Return type of above functions are in int type

 - Examples : 
    1. bin(<number>) function 
        - Used to convert any base to Binary form. Returns an int type value
        - Examples :
            1. Decimal to Binary
                x=2;
                print(bin(x)) # output: 0b10
                print(bin(15)) # output: 0b1111
            
            2. Octal to Binary
                print(bin(0o777))  # output: 0b11101110111

            3. Hexadecimal to Binary
                print(bin(0X777))  # output: 0b11101110111
    ......................................................................................

    2. oct(<number>) function 
        - Used to convert any base to Octal form. Returns an int type value
        - Examples: 
            1. Decimal to Octal 
                x=2;
                print(oct(x)) # output: 0o2
                print(oct(100)) # output: 0o144
            
            2. Binary to Octal
                print(oct(0B101))  # output: 0o5

            3. Hexadecimal to Octal
                print(oct(0XBeef))  # output: 0o137357
    ......................................................................................

    3. hex(<number>) function 
        - Used to convert any base to Hexadecimal form. Returns an int type value
        - Examples: 
            1. Decimal to Hexadecimal
                print(hex(10)) # output: 0xa
                print(hex(234)) # output: 0xea
            
            2. Binary to Hexadecimal
                print(hex(0B111100001))  # output: 0x1e1

            3. Octal to Hexadecimal
                print(hex(0O765))  # output: 0x1f5
    ......................................................................................


 -  To convert from any Base to Decimal, we just have to assign the value to a variable, internally it is converted into
    Decimal form

    - Examples:
       
        value=0XBeef
        print(value) # output: 48879
        print(0xface) # output: 64206
        print(0B10) # output: 2
        print(0O72)# output: 58


* Python2 long data type value was there. But in Python3 it is not there. So in Python3 long values are also 
  represented with int type only

=============================================================================================	
2. float
=============================================================================================

- To represent numbers with a decimal point(s), float type is there.

- float is used to represent any number with decimal points
    PI = 3.14
    print(PI)

* IMPORTANT
---------------------------------------------------------------------------------------
 For floating point data type, only allowed way is Decimal only. Therefore, for float,
 binary, octal or hexadecimal are not applicable

    f=123.456   # VALID (Only decimal base is applicable for float)
    print(f) # output : 123.456

    f=0B111.011 # INVALID
    f=0O123.456 # INVALID
    f=0X123.456 # INVALID

- Representing exponential values
    1.2e3 ===> 1.2 * (10*10*10)
               1.2 * 1000
               1200
    
    Exponential declaration facility is there for float type

        fValue = 1.2e3
        print(fValue) #output: 1200.0

    With exponential, we can represent such bigger values
        print(12.2e100) # output: 1.22e+101


=============================================================================================	
3. complex
=============================================================================================
- Example format of complex numbers : 

    a + bj

    a   = Real part
    b   = Imaginary part
    j^2 = -1  (j is equal to square root of -1)

- Pyton provides more support fo complex numbers with inbuilt complex numbers functionalities

- Here, a and b, can be int values or floating point values also

- Examples:
    p= 10+20j
    print(p) # output : (10+20j)

    q=10.5+2.3j
    print(q) # output : (10.5+2.3j)

    - it is mandatory to use j character at the end. Otherwise, it is invalid
        # r = 2.5+4y # invalid

    - it is mandatory to adhere to the format as well
        # f = 1.2+j20 # Invalid format (format is a+bj)

* IMPORTANT
---------------------------------------------------------------------------------------
    - Here in a+bj, for the real part, we can use int values in any Base (decimal,binary, octal or hexadecimal)

    - Real part can be in any base but imaginary part must be specified only in Decimal.

        Example:
            cv1 = 12+20j
            print(cv1) # output: (12+20j)

            cv2 = 0B1101+18j
            print(cv2) # output: (13+18j)

            cv3 = 0O765+18j
            print(cv3) # output: (501+18j)

            cv4 = 0XBeef+11j
            print(cv4) # output: (48879+11j)

            cv5=0B10+1.23j
            print(cv5) # output: (2+1.23j)

            # This is invalid because imaginary part (b) must be only in decimal base
            # cv6=12+0B1011 # Syntax error
            # print(cv6)

- Performing mathematical operations
 
    l = 10+20j
    m = 20+30j

    print(l+m) # output : (30+50j)
    print(l*m) # output : (-400+700j)
    print(l-m) # output : (-10-10j)
    print(l/m) # output : (0.6153846153846154+0.0769230769230769j)
    
 
- Getting the real value of a complex number with inbuilt variable/ attribute - real
  [Keep in mind that the Format is a+bj, a is the real part, b is the imaginary part and j is - j^2 = -1
  (j is equal to square root of -1)]

    v = 5+ 2.2j
    print(v.real) # output: 5.0

- Getting the imaginary value of a complex number with inbuilt variable/ attribute - imag
    print(v.imag) # output: 2.0


=============================================================================================	
4. bool
=============================================================================================

 - Used to represent some logical/ boolean values
 
 - The only allowed values are True and False. (This is the exact case, and it is case-sensitive)
   for True , starting T should be uppercase and for False, starting F should be uppercase

 - Therefore, we cannot use true ,false, tRue, fALSe or any other case instead of True and False

    isValid = True
    isPermitted = False

    print(isValid) # output: True
    print(isValid) # output: False

    # isValid = true # INVALID (nameError : name true is not defined)
    # isValid = true # INVALID (nameError : name true is not defined)
    # isValid = 'false' # Invalid  - This is considered as a str (String) value

 - Operations with bool values
    num1 = 10
    num2 = 20

    opt1 = num1<num2
    print('opt1 : ',opt1)  # output: opt1 :  True

    opt2 = num1>num2
    print('opt1 : ',opt1) # output: opt2 :  False

 - Internal representation

    Internal in memory level True is treated as 1 and False is treated as 0

        print(True+True) # output: 2
        print(False+False) # output: 0
        print(True-True) # output: 0
        print(False+False) # output: 0
        print(False-True) # output: -1
        print(False<4) # output: False
        print(True*False) # output: 0

=============================================================================================	
5. str (String data type)
=============================================================================================

- A string is simply an any sequence of characters

- We can use either single quotes ot double quotes to enclose a string

- Examples:
    name = 'Toby Maguire'
    print(type(name)) # output: <class 'str'>
    print(name) # output: Toby Maguire

- Even if both single quotes and double quotes are accepted, it is recommended to use double quotes
  to define a context ofn a str (String)

- Another important point is that if we are defining a multiline srt value, we have to use
  triple single quotes ('''text''') or triple double quotes ("""text""")
    
    myText = '''This is
                a multi line
                str'''
    print(myText)

    #output of above is : 
    # This is
    #                a multi line
    #                str

- This multi line declaration is useful for handling double quote or single quote included str values
   So this reduces using additional escape characters within a str
    
    feedback='''This "Durga Class Tutorial" is 'really important' for us '''
    print(feedback) # output: This "Durga Class Tutorial" is 'really important' for us

 - (Next sections : slice operator. Separating into pieces)

    phrase='This is a small phrase'
    # Obtaining the characters from 2 to 15 index (includes 2nd index, excludes 15th index / 2 to (15-1))
    print(phrase[2:15]) # output: is is a small
